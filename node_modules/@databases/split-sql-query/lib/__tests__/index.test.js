"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

const sql_1 = require("@databases/sql");

const __1 = require("..");

test('hasValues', () => {
  expect(__1.hasValues(sql_1.default`SELECT * FROM ${sql_1.default.ident('my_table')}`)).toBe(false);
  expect(__1.hasValues(sql_1.default`SELECT * FROM ${sql_1.default.ident('my_table')} WHERE id = ${42}`)).toBe(true);
});
test('hasSemicolonBeforeEnd', () => {
  expect(__1.hasSemicolonBeforeEnd(sql_1.default`SELECT * FROM ${sql_1.default.ident('my_table')}`)).toBe(false);
  expect(__1.hasSemicolonBeforeEnd(sql_1.default`SELECT * FROM ${sql_1.default.ident('my_table')} WHERE id = ${42};`)).toBe(false);
  expect(__1.hasSemicolonBeforeEnd(sql_1.default`
      SELECT * FROM ${sql_1.default.ident('my_table')} WHERE id = ${42};
    `)).toBe(false);
  expect(__1.hasSemicolonBeforeEnd(sql_1.default`
      SELECT * FROM ${sql_1.default.ident('my_table')} WHERE val = ${'foo;bar'};
    `)).toBe(false);
  expect(__1.hasSemicolonBeforeEnd(sql_1.default`
      INSERT INTO ${sql_1.default.ident('my_table')} (id, value) VALUES (42, 'foo');
      SELECT * FROM ${sql_1.default.ident('my_table')} WHERE id = ${42};
    `)).toBe(true);
}); // N.B. this is a terrible formatter, it's vulnerable to all kinds of SQL injection vulnerabilities
// however, it is useful as it produces very readable outputs for tests

const testFormatter = {
  escapeIdentifier: id => JSON.stringify(id),
  formatValue: v => ({
    placeholder: JSON.stringify(v),
    value: null
  })
};

function doesNotSplit(query) {
  const split = __1.default(query);

  expect(split.map(q => q.format(testFormatter).text)).toEqual([query.format(testFormatter).text]);
  expect(split[0]).toBe(query);
}

test('splitSqlQuery', () => {
  doesNotSplit(sql_1.default`SELECT * FROM ${sql_1.default.ident('my_table')}`);
  doesNotSplit(sql_1.default`SELECT * FROM ${sql_1.default.ident('my_table')} WHERE id = ${42};`);
  doesNotSplit(sql_1.default`
    SELECT * FROM ${sql_1.default.ident('my_table')} WHERE id = ${42};
  `);
  doesNotSplit(sql_1.default`
    SELECT * FROM ${sql_1.default.ident('my_table')} WHERE val = ${'foo;bar'};
  `); // debugger;

  doesNotSplit(sql_1.default`
    SELECT * FROM ${sql_1.default.ident('my_table')} -- semicolons; in; comments; don't count;
    WHERE val = 'foo;bar'
    AND "col;name" = \`other;col\`; -- or identifiers (Postgres or MySQL style)
  `);
  expect(__1.default(sql_1.default`
      INSERT INTO ${sql_1.default.ident('my_table')} (id, value) VALUES (42, 'foo');
      SELECT * FROM ${sql_1.default.ident('my_table')} WHERE id = ${42};
    `).map(q => q.format(testFormatter))).toEqual([sql_1.default`INSERT INTO ${sql_1.default.ident('my_table')} (id, value) VALUES (42, 'foo')`, sql_1.default`SELECT * FROM ${sql_1.default.ident('my_table')} WHERE id = ${42}`].map(q => q.format(testFormatter)));
});