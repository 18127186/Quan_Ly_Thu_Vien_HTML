"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

const sql_1 = require("@databases/sql");

function hasValuesFormatter(query) {
  return query.some(q => q.type === sql_1.SQLItemType.VALUE);
}

function hasValues(query) {
  return query.format(hasValuesFormatter);
}

exports.hasValues = hasValues;

function hasSemicolonBeforeEndFormatter(query) {
  return query.some((q, i) => {
    if (q.type !== sql_1.SQLItemType.RAW) return false;

    if (i === query.length - 1) {
      const text = q.text.trim();
      const index = text.indexOf(';');
      return index !== -1 && index < text.length - 1;
    }

    return q.text.includes(';');
  });
}

function hasSemicolonBeforeEnd(query) {
  return query.format(hasSemicolonBeforeEndFormatter);
}

exports.hasSemicolonBeforeEnd = hasSemicolonBeforeEnd;

function splitSqlQueryParts(query) {
  let parts = [];
  const queries = [parts];
  let quoteChar;
  let lineCommentStart = false;
  let isLineComment = false;
  let blockCommentStart = false;
  let isBlockComment = false;
  let isBlockCommentPrinted = false;
  let isBlockCommentFirstChar = false;
  let isBlockCommentEnd = false;

  for (const part of query) {
    if (part.type === sql_1.SQLItemType.RAW) {
      let str = '';

      for (const char of part.text) {
        if (lineCommentStart) {
          lineCommentStart = false;

          if (char === '-') {
            isLineComment = true;
          } else {
            str += '-';
          }
        }

        if (blockCommentStart) {
          blockCommentStart = false;

          if (char === '*') {
            isBlockCommentFirstChar = true;
            isBlockComment = true;
          } else {
            str += '/';
          }
        }

        if (isBlockCommentFirstChar) {
          isBlockCommentFirstChar = false;

          if (char === '*') {
            isBlockCommentEnd = true;
          } else if (!/\s/.test(char)) {
            isBlockCommentPrinted = true;
            str += '/*' + char;
          }
        } else if (isBlockComment) {
          if (isBlockCommentPrinted) {
            str += char;
          }

          if (isBlockCommentEnd) {
            isBlockCommentEnd = false;

            if (char === '/') {
              isBlockComment = false;
              isBlockCommentPrinted = false;
            }
          } else if (char === '*') {
            isBlockCommentEnd = true;
          }
        } else if (isLineComment) {
          if (char === '\n') {
            str += '\n';
            isLineComment = false;
          }
        } else if (char === quoteChar) {
          quoteChar = undefined;
          str += char;
        } else if (quoteChar) {
          str += char;
        } else {
          switch (char) {
            case `'`:
            case `"`:
            case '`':
              quoteChar = char;
              str += char;
              break;

            case `-`:
              lineCommentStart = true;
              break;

            case `/`:
              blockCommentStart = true;
              break;

            case `;`:
              if (parts.length) {
                parts.push({
                  type: sql_1.SQLItemType.RAW,
                  text: str
                });
                parts = [];
                queries.push(parts);
                str = '';
              }

              break;

            default:
              str += char;
              break;
          }
        }
      }

      if (lineCommentStart) {
        str += '-';
      }

      if (blockCommentStart) {
        str += '/';
      }

      if (parts.length || str.trim()) {
        parts.push({
          type: sql_1.SQLItemType.RAW,
          text: str
        });
      }
    } else {
      parts.push(part);
    }
  }

  return queries.filter(parts => parts.length).map(parts => sql_1.default.__dangerous__constructFromParts(parts));
}

function splitSqlQuery(query) {
  if (!hasSemicolonBeforeEnd(query)) return [query];
  const split = query.format(splitSqlQueryParts);

  if (split.length <= 1) {
    return [query];
  } else {
    return split;
  }
}

exports.default = splitSqlQuery;