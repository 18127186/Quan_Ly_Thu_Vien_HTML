"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

const IsolationLevel_1 = require("../types/IsolationLevel"); // N.B. Issuing BEGIN when already inside a transaction block will provoke
// a warning message. The state of the transaction is not affected. To nest
// transactions within a transaction block, use savepoints.


async function beginTransaction(client, options) {
  const parameters = [];

  if (options.isolationLevel) {
    parameters.push(IsolationLevel_1.isolationLevelToString(options.isolationLevel));
  }

  if (options.readOnly) {
    parameters.push('READ ONLY');
  } else if (options.readOnly === false) {
    parameters.push('READ WRITE');
  }

  if (options.deferrable) {
    parameters.push('DEFERRABLE');
  } else if (options.deferrable === false) {
    parameters.push('NOT DEFERRABLE');
  }

  if (parameters.length) {
    await client.query(`BEGIN ${parameters.join(', ')}`);
  } else {
    await client.query(`BEGIN`);
  }
}

exports.beginTransaction = beginTransaction;

async function rollbackTransaction(client) {
  await client.query(`ROLLBACK`);
}

exports.rollbackTransaction = rollbackTransaction;

async function commitTransaction(client) {
  await client.query(`COMMIT`);
}

exports.commitTransaction = commitTransaction;