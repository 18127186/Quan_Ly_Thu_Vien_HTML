/// <reference types="node" />
import { Readable } from 'stream';
import { SQLQuery } from '@databases/sql';
import AbortSignal from './types/AbortSignal';
import PgClient from './types/PgClient';
import { Transaction as ITransaction, QueryableType } from './types/Queryable';
export default class Transaction implements ITransaction {
    readonly type = QueryableType.Transaction;
    readonly sql: import("@databases/sql").SQL;
    private readonly _client;
    private _disposed;
    private readonly _lock;
    constructor(client: PgClient);
    private _throwIfDisposed;
    task<T>(fn: (connection: ITransaction) => Promise<T>): Promise<T>;
    tx<T>(fn: (connection: ITransaction) => Promise<T>): Promise<T>;
    query(query: SQLQuery): Promise<any[]>;
    query(query: SQLQuery[]): Promise<any[][]>;
    queryNodeStream(query: SQLQuery, options?: {
        highWaterMark?: number;
    }): Readable;
    queryStream(query: SQLQuery, options?: {
        batchSize?: number;
        signal?: AbortSignal | undefined;
    }): AsyncGenerator<any, void, unknown>;
    dispose(): void;
}
